// Generated by CoffeeScript 1.3.3
(function() {
  var MultiTouch,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  MultiTouch = (function(_super) {

    __extends(MultiTouch, _super);

    function MultiTouch() {
      return MultiTouch.__super__.constructor.apply(this, arguments);
    }

    MultiTouch.prototype.initialize = function() {
      console.log("MultiTouch.initialize");
      _.bindAll(this);
      this.hammer = new Hammer(this.el, {
        drag_min_distance: 0,
        drag_horizontal: true,
        drag_vertical: true,
        transform: false,
        hold: false,
        prevent_default: true
      });
      this.hammer.ontap = this.ontap;
      this.hammer.ondragstart = this.ondragstart;
      this.hammer.ondrag = this.ondrag;
      this.hammer.ondragend = this.ondragend;
      console.log(this.hammer);
      return this;
    };

    MultiTouch.prototype.ontap = function(event) {
      this.passEventToBlock(event);
      return this.passEventToRegion(event);
    };

    MultiTouch.prototype.ondragstart = function(event) {
      return this.passEventToBlock(event);
    };

    MultiTouch.prototype.ondrag = function(event) {
      return this.passEventToBlock(event);
    };

    MultiTouch.prototype.ondragend = function(event) {
      return this.passEventToBlock(event);
    };

    MultiTouch.prototype.passEventToRegion = function(event) {
      var region, touch, touches, _i, _len, _results;
      touches = event.originalEvent.touches || [event.originalEvent];
      _results = [];
      for (_i = 0, _len = touches.length; _i < _len; _i++) {
        touch = touches[_i];
        region = $(touch.target).parents(".region-button");
        if (region.length > 0) {
          _results.push($(region).trigger(event));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MultiTouch.prototype.passEventToBlock = function(event) {
      var block, touch, touches, _i, _len, _results;
      touches = event.originalEvent.touches || [event.originalEvent];
      _results = [];
      for (_i = 0, _len = touches.length; _i < _len; _i++) {
        touch = touches[_i];
        block = $(touch.target).parents(".block");
        if (block.length > 0) {
          _results.push($(block).trigger(event));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return MultiTouch;

  })(Backbone.View);

  window.MultiTouch = MultiTouch;

}).call(this);
