// Generated by CoffeeScript 1.3.3
(function() {
  var Region, RegionButton, RegionCollection, RegionView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Region = (function(_super) {

    __extends(Region, _super);

    function Region() {
      return Region.__super__.constructor.apply(this, arguments);
    }

    Region.prototype.defaults = {
      position: null,
      active: false,
      sensor: false
    };

    Region.prototype.initialize = function() {
      this.on("change:hover_position", this.onHover, this);
      this.on("change:under", this.onUnder, this);
      return this.on("change:active", this.onActiveChanged, this);
    };

    Region.prototype.toggleSensor = function() {
      return this.set({
        "sensor": !this.get("sensor")
      });
    };

    Region.prototype.onActiveChanged = function() {};

    return Region;

  })(Backbone.Model);

  RegionCollection = (function(_super) {

    __extends(RegionCollection, _super);

    function RegionCollection() {
      return RegionCollection.__super__.constructor.apply(this, arguments);
    }

    RegionCollection.prototype.model = Region;

    RegionCollection.prototype.active_top = 0;

    RegionCollection.prototype.active_bottom = 0;

    RegionCollection.prototype.sensors = [];

    RegionCollection.prototype.positions = [TOP_LEFT, TOP, TOP_RIGHT, BOTTOM_LEFT, BOTTOM, BOTTOM_RIGHT];

    RegionCollection.prototype.initialize = function() {
      _.bindAll(this);
      this.reset();
      return this.on("change:sensor", this.onSensorChanged, this);
    };

    RegionCollection.prototype.reset = function() {
      var position, region, _i, _len, _ref, _results;
      _ref = this.positions;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        position = _ref[_i];
        region = new Region({
          'position': position
        });
        this.add(region);
        new RegionView({
          model: region
        }).render();
        _results.push(new RegionButton({
          model: region
        }).render());
      }
      return _results;
    };

    RegionCollection.prototype.onSensorChanged = function(model) {
      var detected_at_bottom, detected_at_bottom_left_right, detected_at_top, detected_at_top_left_right, move_center_to, oldSensors;
      oldSensors = this.sensors;
      this.sensors = _.map(this.getActiveSensors(), function(element) {
        return element.get('position');
      });
      detected_at_top = _.include(this.sensors, TOP) || _.include(this.sensors, TOP_LEFT) || _.include(this.sensors, TOP_RIGHT);
      detected_at_top_left_right = _.include(this.sensors, TOP_LEFT) && _.include(this.sensors, TOP_RIGHT);
      if (detected_at_top) {
        if (detected_at_top_left_right) {
          if (2 !== this.active_top) {
            move_center_to = _.include(oldSensors, TOP_LEFT) ? TOP_LEFT : TOP_RIGHT;
            this.active_top = 2;
            this.toggleActiveOnRegions({
              TOP_LEFT: true,
              TOP: false,
              TOP_RIGHT: true
            });
          }
        } else {
          if (1 !== this.active_top) {
            this.active_top = 1;
            this.toggleActiveOnRegions({
              TOP_LEFT: false,
              TOP: true,
              TOP_RIGHT: false
            });
          }
        }
      } else {
        if (0 !== this.active_top) {
          this.active_top = 0;
          this.toggleActiveOnRegions({
            TOP_LEFT: false,
            TOP: false,
            TOP_RIGHT: false
          });
        }
      }
      detected_at_bottom = _.include(this.sensors, BOTTOM) || _.include(this.sensors, BOTTOM_LEFT) || _.include(this.sensors, BOTTOM_RIGHT);
      detected_at_bottom_left_right = _.include(this.sensors, BOTTOM_LEFT) && _.include(this.sensors, BOTTOM_RIGHT);
      if (detected_at_bottom) {
        if (detected_at_bottom_left_right) {
          if (2 !== this.active_bottom) {
            move_center_to = _.include(oldSensors, BOTTOM_LEFT) ? BOTTOM_LEFT : BOTTOM_RIGHT;
            this.active_bottom = 2;
            return this.toggleActiveOnRegions({
              BOTTOM_LEFT: true,
              BOTTOM: false,
              BOTTOM_RIGHT: true
            });
          }
        } else {
          if (1 !== this.active_bottom) {
            this.active_bottom = 1;
            return this.toggleActiveOnRegions({
              BOTTOM_LEFT: false,
              BOTTOM: true,
              BOTTOM_RIGHT: false
            });
          }
        }
      } else {
        if (0 !== this.active_bottom) {
          this.active_bottom = 0;
          return this.toggleActiveOnRegions({
            BOTTOM_LEFT: false,
            BOTTOM: false,
            BOTTOM_RIGHT: false
          });
        }
      }
    };

    RegionCollection.prototype.getActiveRegions = function() {
      var activeRegions;
      return activeRegions = this.filter(function(element) {
        return element.get('active');
      });
    };

    RegionCollection.prototype.getActiveSensors = function() {
      var activeSensors;
      return activeSensors = this.filter(function(element) {
        return element.get('sensor');
      });
    };

    RegionCollection.prototype.getRegionAtPosition = function(position) {
      return this.find(function(element) {
        return element.get('position') === position;
      });
    };

    RegionCollection.prototype.toggleActiveOnRegions = function(regions) {
      var changed, position, region, value, _results;
      changed = false;
      _results = [];
      for (position in regions) {
        value = regions[position];
        region = this.getRegionAtPosition(position);
        if (region) {
          _results.push(region.set({
            'active': value
          }));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    return RegionCollection;

  })(Backbone.Collection);

  RegionView = (function(_super) {

    __extends(RegionView, _super);

    function RegionView() {
      return RegionView.__super__.constructor.apply(this, arguments);
    }

    RegionView.prototype.className = "region";

    RegionView.prototype.initialize = function() {
      _.bindAll(this);
      this.collection = this.options.collection;
      this.model.on("change:active", this.render);
      this.$el.appendTo($("#page"));
      return this.$el.addClass(this.model.get("position"));
    };

    RegionView.prototype.render = function() {
      this.$el.toggleClass("active", this.model.get("active"));
      return this;
    };

    return RegionView;

  })(Backbone.View);

  RegionButton = (function(_super) {

    __extends(RegionButton, _super);

    function RegionButton() {
      return RegionButton.__super__.constructor.apply(this, arguments);
    }

    RegionButton.prototype.model = Region;

    RegionButton.prototype.className = "region-button";

    RegionButton.prototype.events = {
      "tap": "ontap"
    };

    RegionButton.prototype.initialize = function() {
      _.bindAll(this);
      this.collection = this.options.collection;
      this.model.on("change:sensor", this.onSensorChanged);
      this.$el.addClass(this.model.get("position"));
      return this.$el.appendTo($("#regions"));
    };

    RegionButton.prototype.render = function() {
      this.$el.html("<div class=\"piece horizontal\"></div>\n<div class=\"piece vertical\"></div>");
      return this;
    };

    RegionButton.prototype.ontap = function(event) {
      return this.model.toggleSensor();
    };

    RegionButton.prototype.onSensorChanged = function() {
      return this.$el.toggleClass("active", this.model.get("sensor"));
    };

    return RegionButton;

  })(Backbone.View);

  window.Region = Region;

  window.RegionCollection = RegionCollection;

  window.RegionView = RegionView;

  window.RegionButton = RegionButton;

}).call(this);
