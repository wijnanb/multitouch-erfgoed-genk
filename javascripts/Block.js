// Generated by CoffeeScript 1.3.3
(function() {
  var Block, BlockCollection, BlockView,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Block = (function(_super) {

    __extends(Block, _super);

    function Block() {
      return Block.__super__.constructor.apply(this, arguments);
    }

    Block.prototype.defaults = {
      position: {
        x: 0,
        y: 0
      }
    };

    Block.prototype.initialize = function() {
      return console.log("Block.initialize");
    };

    return Block;

  })(Backbone.Model);

  BlockCollection = (function(_super) {

    __extends(BlockCollection, _super);

    function BlockCollection() {
      return BlockCollection.__super__.constructor.apply(this, arguments);
    }

    BlockCollection.prototype.model = Block;

    BlockCollection.prototype.initialize = function() {
      this.contentCollection = new ContentCollection();
      return this.contentCollection.bind("reset", this.reset, this);
    };

    BlockCollection.prototype.reset = function() {
      console.log("BlockCollection.reset");
      return this.contentCollection.each(function(element, index, list) {
        var attributes, block, num_block_x;
        console.log(index + ": " + element.get("title"));
        num_block_x = Math.floor(config.screen_width / config.block.width);
        attributes = {
          content: element,
          position: {
            x: index % num_block_x,
            y: Math.floor(index / num_block_x)
          }
        };
        block = new BlockView({
          model: new Block(attributes)
        });
        return block.render().$el.appendTo($("#blocks"));
      });
    };

    return BlockCollection;

  })(Backbone.Collection);

  BlockView = (function(_super) {

    __extends(BlockView, _super);

    function BlockView() {
      return BlockView.__super__.constructor.apply(this, arguments);
    }

    BlockView.prototype.className = "block";

    BlockView.prototype.initialize = function() {
      var hammer;
      console.log("BlockView.initialize");
      _.bindAll(this);
      hammer = new Hammer(this.el, {
        drag_min_distance: 0,
        drag_horizontal: true,
        drag_vertical: true,
        transform: false,
        hold: false,
        prevent_default: true
      });
      hammer.ontap = this.ontap;
      hammer.ondragstart = this.ondragstart;
      hammer.ondrag = this.ondrag;
      hammer.ondragend = this.ondragend;
      return this;
    };

    BlockView.prototype.ontap = function() {
      return console.log("tap", this);
    };

    BlockView.prototype.ondragstart = function() {
      return console.log("dragstart", this);
    };

    BlockView.prototype.ondrag = function() {
      return console.log("drag", this);
    };

    BlockView.prototype.ondragend = function() {
      return console.log("dragend", this);
    };

    BlockView.prototype.render = function() {
      var date, title;
      title = this.model.get('content').get('title');
      date = this.model.get('content').niceDate();
      this.$el.html("<div class=\"inner\">\n	<div class=\"label\">\n		<div class=\"date\">" + date + "</div>\n		<h2>" + title + "</h2>\n	</div>\n</div>");
      this.$el.css("left", this.model.get('position').x * config.block.width + "px");
      this.$el.css("top", this.model.get('position').y * config.block.height + "px");
      return this;
    };

    return BlockView;

  })(Backbone.View);

  window.Block = Block;

  window.BlockView = BlockView;

  window.BlockCollection = BlockCollection;

}).call(this);
